#!/bin/sh
shout() { echo "package/build: $*" >&2; }
barf() { shout "fatal: $*"; exit 111; }
safe() { "$@" || barf "cannot $*"; }
usage() {
  shout "usage: package/build [ --help -v -q -f -F -c compile_dir -s src_dir -b build_cmd ] [ target ... ]"
  exit 100
}

#### MAIN

umask 022

test "$1" = "--help" && usage

here="`env - PATH=$PATH pwd`"

compile_dir="compile"
src_dir="src"
remove=0
build="build"

verbose=""
force=""
while test $# -gt 0
do
  case "$1" in
    -v)
      verbose="$verbose -v"
      shift
      ;;
    -q)
      verbose="$verbose -q"
      shift
      ;;
    -f)
      force="-f"
      shift
      ;;
    -F)
      remove=1
      shift
      ;;
    -c)
      compile_dir="$2"
      shift; shift
      ;;
    -s)
      src_dir="$2"
      shift; shift
      ;;
    -b)
      build_command="$2"
      shift; shift
      ;;
    -*)
      usage
      ;;
    *)
      break
      ;;
  esac
done

test -d "$src_dir" || barf "no src directory: $src_dir"
test -d "$compile_dir" && test 0 -lt $remove && rm -rf "$compile_dir"

# Link files into $compile_dir.
safe mkdir -p "$compile_dir"
test -h "$compile_dir/$src_dir" \
  || safe ln -s "$here/$src_dir" "$compile_dir/$src_dir"

safe ls "$src_dir" | while read f
do
  test -h "$compile_dir/$f" || safe ln -s "$src_dir/$f" "$compile_dir/$f"
done

# Build targets in $compile_dir.
safe cd "$compile_dir"

if test -z "$build_command" -o "build" = "$build_command"
then
  build_cmd="$build $verbose target $force"
else
  build_cmd="$build_command"
fi

if test 0 -lt $#
then
  safe $build_cmd "$@"
else
  safe $build_cmd `awk '$1{print $1}' < build=d`
fi

exit 0

